// Generated by LiveScript 1.2.0
(function(){
  var reject, tokenRegex;
  reject = require('prelude-ls').reject;
  function consumeWord(tokens){
    var token;
    token = tokens[0];
    if (!(token != null && /^[a-zA-Z]+$/.test(token))) {
      throw new Error("Exected textual string.");
    }
    return tokens.shift();
  }
  function consumeOp(tokens, op){
    var token;
    token = tokens[0];
    if (token !== op) {
      throw new Error("Expected " + op);
    }
    return tokens.shift();
  }
  function maybeConsumeOp(tokens, op){
    var token;
    token = tokens[0];
    if (token === op) {
      return tokens.shift();
    } else {
      return null;
    }
  }
  function consumeArray(tokens){
    var contentType;
    consumeOp(tokens, '[');
    contentType = consumeTypes(tokens);
    if (!contentType) {
      throw new Error("Must specify content type for Array.");
    }
    consumeOp(tokens, ']');
    return {
      type: 'Array',
      contentType: contentType
    };
  }
  function consumeTuple(tokens){
    var contentTypes, that;
    contentTypes = [];
    consumeOp(tokens, '(');
    while (that = consumeTypes(tokens)) {
      contentTypes.push(that);
      if (!maybeConsumeOp(tokens, ',')) {
        break;
      }
    }
    consumeOp(tokens, ')');
    return {
      type: 'Tuple',
      contentTypes: contentTypes
    };
  }
  function consumeProperty(tokens){
    var key, type;
    key = consumeWord(tokens);
    consumeOp(tokens, ':');
    type = consumeTypes(tokens);
    return {
      key: key,
      